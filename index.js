#!/usr/bin/env node
const program = require('commander');
const path = require('path');
const fs = require('fs');
const _ = require('lodash');

var command;
program
  .option('-s, --silent', 'silent')
  .arguments('<cmd>')
  .action(function (cmd) {
    command = cmd;
  })
  .parse(process.argv);

function log() {
  if (!program.silent) {
    console.log.apply(null, arguments);
  }
}

if (typeof command === 'undefined') {
  process.stderr.write('ERROR: No command provided!');
  process.exit(1);
}

log('Running flow-scripts in', process.cwd());

const DEFAULT_FLOW_TYPED_DIR = 'flow-typed';
const DEFAULT_PACKAGE_DEP_LIBDEFS_FILENAME = 'package-dep-libdefs.js';
const DEFAULT_FLOW_TYPED_NPM_DIR = 'npm';
const LIBDEF_REGEX = /(.+)_v[\d|x]\.[\d|x]\.[\d|x]\.js/;

switch (command) {
  case 'stub':
    {
      const dir = DEFAULT_FLOW_TYPED_DIR;
      const filename = DEFAULT_PACKAGE_DEP_LIBDEFS_FILENAME;
      if (!fs.existsSync(dir)) {
        log(`The directory \`${dir}\` does not exist, creating it...`);
        fs.mkdirSync(dir);
      }

      const libdefDir = path.join(process.cwd(), DEFAULT_FLOW_TYPED_DIR, DEFAULT_FLOW_TYPED_NPM_DIR);
      let packagesWithLibdef = [];
      if (fs.existsSync(libdefDir)) {
        const libdefFiles = fs.readdirSync(libdefDir);
        packagesWithLibdef = libdefFiles.map((file) => {
          return LIBDEF_REGEX.exec(file)[1];
        });
      } else {
        log('No existing community libdefs found. It is recommended to run `flow-typed install` first to pull in community libdefs.\n');
      }

      const fullPackagePath = path.join(process.cwd(), 'package.json');
      const pkg = require(fullPackagePath);
      const dependencies = Object.keys(pkg.dependencies);
      const packagesWithoutLibdef =  _.difference(dependencies, packagesWithLibdef);

      let fileContents = '// This file is generated by flow-scripts.\n\n';
      fileContents += packagesWithoutLibdef.map(function (dep) {
        log(`Generating stub libdef for "${dep}".`);
        return '' +
`declare module '${dep}' {
  declare module.exports: any;
}`;
      }).join('\n\n') + '\n';
      fs.writeFileSync(`${dir}/${filename}`, fileContents);
      log(`Wrote generated libdef stubs to \`${process.cwd()}/${dir}/${filename}\``);
    }
    break;
  default:
    {
      process.stderr.write(`ERROR: Invalid command provided: ${command}`);
      process.exit(1);
    }
    break;
}
